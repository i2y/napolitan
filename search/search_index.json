{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Napolitan is a lightweight, user-friendly library for creating custom elements with a simple API for PyScript. It uses a declarative approach for easy component structure definition and updates only changed parts of the DOM for efficiency. It works with both Pyodide and MicroPython, using only the language features and built-in libraries supported by both, intentionally avoiding certain modules like typing and metaclasses. Based on Web Components, probably, Napolitan works with any PyScript, JavaScript, or TypeScript framework.</p>"},{"location":"#quick-look","title":"Quick Look","text":""},{"location":"#example-counter-not-styled","title":"Example: Counter (Not Styled)","text":"PythonHTMLResult <pre><code>from napolitan.core import Component, Attr, customElement\nfrom napolitan.livingstandard import div, button\n\n\n@customElement(\"my-counter-not-styled\")\nclass Counter(Component):\n\n    count = Attr(int, 0)\n\n    def render(self):\n        return div()(\n            button(onclick=self.increment)(\"Increment\"),\n            self.count,\n            button(onclick=self.decrement)(\"Decrement\"),\n        )\n\n    def increment(self, _):\n        self.count += 1\n\n    def decrement(self, _):\n        self.count -= 1\n</code></pre> <pre><code>&lt;my-counter-not-styled count=\"0\"&gt;&lt;/my-counter-not-styled&gt;\n</code></pre>"},{"location":"#example-counter-styled-using-shoelace","title":"Example: Counter (Styled using Shoelace)","text":"<p>Info</p> <p>\"+\" annotations in this example explain each part of the code well, so could please click \"+\" if you want to know the details.</p> PythonHTMLResult <pre><code>from napolitan.core import Component, Attr, customElement\nfrom napolitan.livingstandard import div, span\nfrom napolitan.shoelace import button, button_group, icon, card\n\n\n@customElement(\"my-counter\")  #(1)\nclass Counter(Component): #(2)\n\n    count = Attr(int, 0) #(3)\n\n    @staticmethod\n    def style(): #(4)\n        return \"\"\"\n        .counter {\n            --padding: 1rem;\n            --border-color: #1E2129;\n        }\n        .count {\n            font-size: 3rem;\n            font-weight: bold;\n            color: #1E2129;\n            display: flex;\n            justify-content: center;\n        }\n        \"\"\"\n\n    def render(self): #(5)\n        return card(cls=\"counter\")(\n            span(cls=\"count\")(self.count),\n            div(slot=\"footer\", cls=\"footer\")(\n                button_group(label=\"btns\")(\n                    button(variant=\"primary\", onclick=self.increment)( #(8)\n                        icon(name=\"plus-lg\")\n                    ),\n                    button(variant=\"primary\", onclick=self.decrement)( #(9)\n                        icon(name=\"dash-lg\")\n                    ),\n                )\n            ),\n        )\n\n    def increment(self, e): #(6)\n        self.count += 1\n\n    def decrement(self, e): #(7)\n        self.count -= 1\n</code></pre> <ol> <li>Register the component with the name <code>my-counter</code> as a custom element.</li> <li>Define the <code>Counter</code> class that extends the <code>Component</code> class.</li> <li>Define a <code>count</code> attrerty with a default value of <code>0</code>.     The <code>Attr</code> class is used to define a attrerty of the component.     The <code>Attr</code> class takes two arguments: the type of the attrerty and the default value.     <code>my-counter</code> custom element can be used with the <code>count</code> attribute.     If you want to use the <code>count</code> as an internal state, you can define it using <code>State</code> class instead of using <code>Attr</code> class. If you use <code>State</code> class, the <code>count</code> will not be related to the <code>count</code> attribute of the <code>my-counter</code> custom element.</li> <li>Define the <code>style</code> method to return the CSS styles for the component.</li> <li>Define the <code>render</code> method to return the HTML structure of the component.     Napolitan provides some sets of helper functions to create DOM elements and factory class to create a helper function for any DOM element as well. Here, <code>sl_card</code>, <code>sl_button</code>, <code>sl_button_group</code>, and <code>sl_icon</code> are helper functions to create Shoelace components. Napolitan currently provides a set of helper functions to create Shoelace components, HTML Living Standard elements, and Nord components. And also, you can use HTML tags text directly to create DOM elements, please refer to examples directory in the Napolitan repository, if you are interested in that.</li> <li>Define the <code>increment</code> method to increment the <code>count</code> attrerty.     When <code>count</code> attrerty is updated, the only <code>count</code> span will be re-rendered automatically.</li> <li>Define the <code>decrement</code> method to decrement the <code>count</code> attrerty.     When <code>count</code> attrerty is updated, the only <code>count</code> span will be re-rendered automatically.</li> <li>Add an event listener to the <code>+</code> button click to call the <code>increment</code> method.</li> <li>Add an event listener to the <code>-</code> button click to call the <code>decrement</code> method.</li> </ol> <pre><code>&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.15.0/cdn/themes/light.css\" /&gt;\n&lt;script type=\"module\" src=\"https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.15.0/cdn/shoelace.js\"&gt;&lt;/script&gt;\n&lt;script type=\"mpy\" src=\"examples/counter.py\" config=\"examples/pyscript.toml\"&gt;&lt;/script&gt;\n&lt;my-counter count=\"10\"&gt;&lt;/my-counter&gt;\n</code></pre> <p></p>"},{"location":"#example-counter-used-listen-decorator-for-event-handling","title":"Example: Counter (Used <code>listen</code> decorator for event handling)","text":"PythonHTMLResult <pre><code>from napolitan.core import Component, Attr, customElement, track_method_calls, listen\nfrom napolitan.livingstandard import div, span\nfrom napolitan.shoelace import sl_button, sl_button_group, sl_icon, sl_card\n\n\n@customElement(\"my-counter-use-listen\")\nclass Counter(Component):\n\n    count = Attr(int, 0)\n\n    @staticmethod\n    def style():\n        return \"\"\"\n        :host {\n            display: flex;\n            width: fit-content;\n            height: fit-content;\n        }\n        .counter {\n            --padding: 1rem;\n            --border-color: #1E2129;\n        }\n        .count {\n            font-size: 3rem;\n            font-weight: bold;\n            color: #1E2129;\n            display: flex;\n            justify-content: center;\n        }\n        .counter [slot='footer'] {\n            display: flex;\n            justify-content: center;\n        }\n        \"\"\"\n\n    def render(self):\n        return sl_card(cls=\"counter\")(\n            span(cls=\"count\")(self.count),\n            div(slot=\"footer\")(\n                sl_button_group(label=\"btns\")(\n                    sl_button(cls=\"inc\", variant=\"primary\")(\n                        sl_icon(name=\"plus-lg\"),\n                    ),\n                    sl_button(cls=\"dec\", variant=\"primary\")(\n                        sl_icon(name=\"dash-lg\")\n                    ),\n                )\n            ),\n        )\n\n    @listen(\"click\", \".inc\")\n    def increment(self, e):\n        self.count += 1\n\n    @listen(\"click\", \".dec\")\n    def decrement(self, e):\n        self.count -= 1\n</code></pre> <pre><code>&lt;script type=\"mpy\" src=\"examples/counter_use_listen.py\" config=\"examples/pyscript.toml\"&gt;&lt;/script&gt;\n&lt;my-counter-use-listen count=\"20\"&gt;&lt;/my-counter-use-listen&gt;\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":"<p>For now, Napolitan is not provided as a package in PyPI because MicroPython doesn't support installing packages via PyPI and pip. You can copy the <code>docs/examples/napolitan</code> directory to your project and use it with setting the path to the <code>napolitan</code> files in your PyScript config file.</p> <p>For example, you can write your <code>pyscript.toml</code> file like below.</p> <pre><code>packages = []\n\n[files]\n\"napolitan/core.py\" = \"napolitan/core.py\"\n\"napolitan/livingstandard.py\" = \"napolitan/livingstandard.py\"\n\"napolitan/shoelace.py\" = \"napolitan/shoelace.py\" # If you use Shoelace components\n</code></pre> <p>Or, you can refer the files in the <code>docs/examples/napolitan</code> directory of Napolitan repo directly in your <code>pyscript.toml</code> file.</p> <pre><code>packages = []\n\n[files]\n\"https://raw.githubusercontent.com/i2y/napolitan/main/docs/examples/napolitan/core.py\" = \"napolitan/core.py\"\n\"https://raw.githubusercontent.com/i2y/napolitan/main/docs/examples/napolitan/livingstandard.py\" = \"napolitan/livingstandard.py\"\n\"https://raw.githubusercontent.com/i2y/napolitan/main/docs/examples/napolitan/shoelace.py\" = \"napolitan/shoelace.py\" # If you use Shoelace components\n</code></pre> <p>Then, you can import the Napolitan modules in your PyScript files.</p> <pre><code>from napolitan.core import Component, Prop, register\nfrom napolitan.livingstandard import div, span\nfrom napolitan.shoelace import sl_button, sl_button_group, sl_icon, sl_card\n</code></pre> <p>The example above is the actual code snippet from example code in Napolitan repository.</p> <p>Info</p> <p>The documentation of Napolitan is under construction. If you want to know more about Napolitan, please refer to the examples in the <code>examples</code> directory of the Napolitan repository.</p>"},{"location":"license/","title":"License","text":"<p>Copyright (c) 2024 Yasushi Itoh</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"}]}